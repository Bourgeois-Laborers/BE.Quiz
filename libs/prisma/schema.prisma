// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./src/prisma-client"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "debian-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(uuid())
  sessions             SessionToUser[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  QuizExecutionResults QuizExecutionResult[]
  QuizConfigurations   QuizConfiguration[]
}

enum SessionStatus {
  OPEN
  LIVE
  CLOSED
}

model Session {
  id             String          @id @default(uuid())
  status         SessionStatus   
  sessionUsers   SessionToUser[]
  quizExecutions QuizExecution[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model SessionToUser {
  id        String   @id @default(uuid())
  session   Session  @relation(fields: [sessionId], references: [id])
  sessionId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  userAlias String
  isHost    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, sessionId])
}

model QuizConfiguration {
  id             String          @id @default(uuid())
  name           String
  prompt         String
  questionsCount Int
  questions      QuizQuestion[]
  quizExecution  QuizExecution[]
  user           User            @relation(fields: [userId], references: [id])
  userId         String
  isPrivate      Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model QuizAnswer {
  id                  String                @id @default(uuid())
  answer              String
  score               Float
  question            QuizQuestion          @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId          String
  quizExecutionResult QuizExecutionResult[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model QuizQuestion {
  id                  String                @id @default(uuid())
  complexity          String
  question            String
  quizConfiguration   QuizConfiguration     @relation(fields: [quizConfigurationId], references: [id])
  quizConfigurationId String
  answers             QuizAnswer[]
  QuizExecutionResult QuizExecutionResult[]
  order               Int                   @default(0)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model QuizExecution {
  id                  String                @id @default(uuid())
  timePerQuestion     Int
  shareAnswers        Boolean
  quizConfiguration   QuizConfiguration     @relation(fields: [quizConfigurationId], references: [id])
  quizConfigurationId String
  session             Session               @relation(fields: [sessionId], references: [id])
  sessionId           String
  quizExecutionResult QuizExecutionResult[]
  status              QuizExecutionStatus   @default(COMPLETED) 
  finishedAt          DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

enum QuizExecutionStatus {
  PENDING
  EXECUTING
  PAUSED
  COMPLETED
  CANCELED
}

model QuizExecutionResult {
  id              String        @id @default(uuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  answer          QuizAnswer    @relation(fields: [answerId], references: [id])
  answerId        String
  question        QuizQuestion  @relation(fields: [questionId], references: [id])
  questionId      String
  quizExecution   QuizExecution @relation(fields: [quizExecutionId], references: [id])
  quizExecutionId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}
